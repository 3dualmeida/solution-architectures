{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "locations": {
        "type": "array",
        "defaultValue": [
          {
            "regionName": "australiaeast",
            "cosmosDBFailoverPriority": 0,
            "frontDoorFailoverPriority": 1,
            "resourceNameSuffix": "ae"
          },
          {
            "regionName": "eastus",
            "cosmosDBFailoverPriority": 1,
            "frontDoorFailoverPriority": 2,
            "resourceNameSuffix": "eus"
          },
          {
            "regionName": "westeurope",
            "cosmosDBFailoverPriority": 2,
            "frontDoorFailoverPriority": 3,
            "resourceNameSuffix": "weu"
          },
          {
            "regionName": "eastasia",
            "cosmosDBFailoverPriority": 3,
            "frontDoorFailoverPriority": 4,
            "resourceNameSuffix": "easia"
          }
        ]
      },
      "cosmosDBAccountName": {
        "type": "string",
        "defaultValue": "[concat('trafficrouting-', uniqueString(subscription().subscriptionId, resourceGroup().id))]"
      },
      "apiManagementServiceNamePrefix": {
        "type": "string",
        "defaultValue": "[concat('trafficrouting-', uniqueString(subscription().subscriptionId, resourceGroup().id))]"
      },
      "frontDoorName": {
        "type": "string",
        "defaultValue": "[concat('trafficrouting-', uniqueString(subscription().subscriptionId, resourceGroup().id))]"
      },
      "apiManagementPublisherEmailAddress": {
        "type": "string"
      },
      "apiManagementPublisherName": {
        "type": "string"
      },
      "cosmosDBDatabaseThroughput": {
        "type": "int",
        "defaultValue": 400,
        "minValue": 400,
        "maxValue": 1000000
      }
    },
    "variables": {
      "cosmosDBAccountName": "[toLower(parameters('cosmosDBAccountName'))]",
      "copy": [
        {
          "name": "cosmosDBLocations",
          "count": "[length(parameters('locations'))]",
          "input": {
            "locationName": "[parameters('locations')[copyIndex('cosmosDBLocations', 0)].regionName]",
            "failoverPriority": "[parameters('locations')[copyIndex('cosmosDBLocations')].cosmosDBFailoverPriority]",
            "isZoneRedundant": false
          }
        }
      ],
      "cosmosDBDatabaseName": "tenant-stamps",
      "cosmosDBCollectionName": "tenant-stamps",
      "cosmosDBPartitionKeyPath": "/tenantId",
      "apiManagementApiName": "my-api",
      "apiManagementOperationName": "test"
    },
    "resources": [
      {
        "name": "[variables('cosmosDBAccountName')]",
        "type": "Microsoft.DocumentDB/databaseAccounts",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-08-01",
        "kind": "GlobalDocumentDB",
        "properties": {
          "locations": "[variables('cosmosDBLocations')]",
          "databaseAccountOfferType": "Standard",
          "enableMultipleWriteLocations": false
        },
        "resources": [
          {
            "name": "[variables('cosmosDBDatabaseName')]",
            "type": "sqlDatabases",
            "apiVersion": "2019-08-01",
            "properties": {
              "resource": {
                "id": "[variables('cosmosDBDatabaseName')]"
              },
              "options": {
                "throughput": "[parameters('cosmosDBDatabaseThroughput')]"
              }
            },
            "resources": [
              {
                "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                "name": "[concat(variables('cosmosDBAccountName'), '/', variables('cosmosDBDatabaseName'), '/', variables('cosmosDBCollectionName'))]",
                "apiVersion": "2019-08-01",
                "properties": {
                  "resource": {
                    "id": "[variables('cosmosDBCollectionName')]",
                    "partitionKey": {
                      "paths": [
                        "[variables('cosmosDBPartitionKeyPath')]"
                      ],
                      "kind": "Hash"
                    },
                    "indexingPolicy": {
                      "indexingMode": "consistent"
                    }
                  }
                },
                "dependsOn": [
                  "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDBAccountName'), variables('cosmosDBDatabaseName'))]"
                ]
              }
            ],
            "dependsOn": [
              "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName'))]"
            ]
          }
        ]
      },
      {
        "name": "[concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix)]",
        "type": "Microsoft.ApiManagement/service",
        "apiVersion": "2018-06-01-preview",
        "location": "[parameters('locations')[copyIndex()].regionName]",
        "copy": {
          "name": "apiManagementLocations",
          "count": "[length(parameters('locations'))]"
        },
        "sku": {
          "name": "Consumption"
        },
        "properties": {
          "publisherEmail": "[parameters('apiManagementPublisherEmailAddress')]",
          "publisherName": "[parameters('apiManagementPublisherName')]"
        },
        "resources": [
          {
            "name": "CosmosDBAccountKey",
            "type": "properties",
            "apiVersion": "2019-01-01",
            "properties": {
              "displayName": "CosmosDBAccountKey",
              "secret": true,
              "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName')), '2019-08-01').primaryMasterKey]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.ApiManagement/service', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix))]",
              "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName'))]"
            ]
          },
          {
            "name": "CosmosDBAccountUrl",
            "type": "properties",
            "apiVersion": "2019-01-01",
            "properties": {
              "displayName": "CosmosDBAccountUrl",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName'))).documentEndpoint]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.ApiManagement/service', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix))]",
              "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName'))]"
            ]
          },
          {
            "name": "CosmosDBDatabaseName",
            "type": "properties",
            "apiVersion": "2019-01-01",
            "properties": {
              "displayName": "CosmosDBDatabaseName",
              "value": "[variables('cosmosDBDatabaseName')]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.ApiManagement/service', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix))]",
              "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName'))]"
            ]
          },
          {
            "name": "CosmosDBCollectionName",
            "type": "properties",
            "apiVersion": "2019-01-01",
            "properties": {
              "displayName": "CosmosDBCollectionName",
              "value": "[variables('cosmosDBCollectionName')]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.ApiManagement/service', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix))]",
              "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDBAccountName'))]"
            ]
          },
          {
            "name": "policy",
            "type": "policies",
            "apiVersion": "2018-06-01-preview",
            "properties": {
              "policyContent": "<policies><inbound><set-variable name=\"requestTenantId\" value=\"@(context.Request.MatchedParameters[&quot;tenantId&quot;])\" /><set-variable name=\"requestDateString\" value=\"@(DateTime.UtcNow.ToString(&quot;r&quot;))\" /><send-request mode=\"new\" response-variable-name=\"response\" timeout=\"10\" ignore-error=\"false\">  <set-url>{{CosmosDBAccountUrl}}dbs/{{CosmosDBDatabaseName}}/colls/{{CosmosDBCollectionName}}/docs</set-url>  <set-method>POST</set-method>  <!-- Based on https://anthonychu.ca/post/azure-api-management-look-up-user-cosmos-db/ -->  <set-header name=\"Authorization\" exists-action=\"override\">    <value>@{                var verb = \"post\";                var resourceType = \"docs\";                var resourceLink = \"dbs/{{CosmosDBDatabaseName}}/colls/{{CosmosDBCollectionName}}\";                var key = \"{{CosmosDBAccountKey}}\";                var keyType = \"master\";                var tokenVersion = \"1.0\";                var date = context.Variables.GetValueOrDefault&lt;string&gt;(\"requestDateString\");            var hmacSha256 = new System.Security.Cryptography.HMACSHA256 { Key = Convert.FromBase64String(key) };            verb = verb ?? \"\";                resourceType = resourceType ?? \"\";                resourceLink = resourceLink ?? \"\";            string payLoad = string.Format(\"{0}\\n{1}\\n{2}\\n{3}\\n{4}\\n\",                        verb.ToLowerInvariant(),                        resourceType.ToLowerInvariant(),                        resourceLink,                        date.ToLowerInvariant(),                        \"\"                );            byte[] hashPayLoad = hmacSha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(payLoad));                string signature = Convert.ToBase64String(hashPayLoad);            return System.Uri.EscapeDataString(String.Format(\"type={0}&amp;ver={1}&amp;sig={2}\",                    keyType,                    tokenVersion,                    signature));            }</value>  </set-header>  <set-header name=\"Content-Type\" exists-action=\"override\">    <value>application/query+json</value>  </set-header>  <set-header name=\"x-ms-documentdb-isquery\" exists-action=\"override\">    <value>True</value>  </set-header>  <set-header name=\"x-ms-date\" exists-action=\"override\">    <value>@(context.Variables.GetValueOrDefault&lt;string&gt;(\"requestDateString\"))</value>  </set-header>  <set-header name=\"x-ms-version\" exists-action=\"override\">    <value>2018-12-31</value>  </set-header>  <set-body>@(\"{\\\"query\\\": \\\"SELECT VALUE c.backendUrl FROM c WHERE c.tenantId = @tenantId\\\", \" +            \"\\\"parameters\\\": [{ \\\"name\\\": \\\"@tenantId\\\", \\\"value\\\": \\\"\" + context.Variables.GetValueOrDefault&lt;string&gt;(\"requestTenantId\") + \"\\\"}]}\")</set-body></send-request><set-variable name=\"backendService\" value=\"@(((IResponse)context.Variables[&quot;response&quot;]).Body.As&lt;JObject&gt;()[&quot;Documents&quot;][0].ToString())\" /><set-backend-service base-url=\"@(context.Variables.GetValueOrDefault&lt;string&gt;(&quot;backendService&quot;))\" /></inbound></policies>"
            },
            "dependsOn": [
              "[resourceId('Microsoft.ApiManagement/service', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix))]",
              "[resourceId('Microsoft.ApiManagement/service/properties', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix), 'CosmosDBAccountKey')]",
              "[resourceId('Microsoft.ApiManagement/service/properties', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix), 'CosmosDBAccountUrl')]",
              "[resourceId('Microsoft.ApiManagement/service/properties', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix), 'CosmosDBDatabaseName')]",
              "[resourceId('Microsoft.ApiManagement/service/properties', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix), 'CosmosDBCollectionName')]"
            ]
          },
          {
            "name": "[variables('apiManagementApiName')]",
            "type": "apis",
            "apiVersion": "2018-06-01-preview",
            "properties": {
              "displayName": "My API",
              "description": "Sample API.",
              "path": "",
              "protocols": [
                "https"
              ]
            },
            "dependsOn": [
              "[resourceId('Microsoft.ApiManagement/service', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix))]"
            ],
            "resources": [
              {
                "type": "operations",
                "name": "[variables('apiManagementOperationName')]",
                "apiVersion": "2018-06-01-preview",
                "properties": {
                  "displayName": "Test operation",
                  "method": "POST",
                  "urlTemplate": "/{tenantId}/performOperation",
                  "description": "Test API operation.",
                  "templateParameters": [
                    {
                      "name": "tenantId",
                      "required": true,
                      "type": "string"
                    }
                  ],
                  "responses": [
                    {
                      "statusCode": 200,
                      "description": "OK"
                    }
                  ]
                },
                "dependsOn": [
                  "[resourceId('Microsoft.ApiManagement/service/apis', concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex()].resourceNameSuffix), variables('apiManagementApiName'))]"
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "[parameters('frontDoorName')]",
        "type": "Microsoft.Network/frontDoors",
        "apiVersion": "2019-04-01",
        "location": "global",
        "properties": {
          "routingRules": [
            {
              "name": "allTrafficRoutingRule",
              "properties": {
                "frontendEndpoints": [
                  {
                    "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', parameters('frontDoorName'), 'frontendEndpoint')]"
                  }
                ],
                "acceptedProtocols": [
                  "Http",
                  "Https"
                ],
                "patternsToMatch": [
                  "/*"
                ],
                "routeConfiguration": {
                  "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                  "forwardingProtocol": "MatchRequest",
                  "backendPool": {
                    "id": "[resourceId('Microsoft.Network/frontDoors/backendPools', parameters('frontDoorName'), 'backendPool')]"
                  }
                },
                "enabledState": "Enabled"
              }
            }
          ],
          "healthProbeSettings": [
            {
              "name": "healthProbeSettings",
              "properties": {
                "path": "/",
                "protocol": "Http",
                "intervalInSeconds": 120
              }
            }
          ],
          "loadBalancingSettings": [
            {
              "name": "loadBalancingSettings",
              "properties": {
                "sampleSize": 4,
                "successfulSamplesRequired": 2
              }
            }
          ],
          "backendPools": [
            {
              "name": "backendPool",
              "properties": {
                "copy": [
                  {
                    "name": "backends",
                    "count": "[length(parameters('locations'))]",
                    "input": {
                      "address": "[replace(reference(concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex('backends')].resourceNameSuffix), '2018-06-01-preview').gatewayUrl, 'https://', '')]",
                      "backendHostHeader": "[replace(reference(concat(parameters('apiManagementServiceNamePrefix'), '-', parameters('locations')[copyIndex('backends')].resourceNameSuffix), '2018-06-01-preview').gatewayUrl, 'https://', '')]",
                      "priority": "[parameters('locations')[copyIndex('backends')].frontDoorFailoverPriority]",
                      "weight": 50,
                      "enabledState": "Enabled",
                      "httpPort": 80,
                      "httpsPort": 443
                    }
                  }
                ],
                "loadBalancingSettings": {
                  "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', parameters('frontDoorName'), 'loadBalancingSettings')]"
                },
                "healthProbeSettings": {
                  "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', parameters('frontDoorName'), 'healthProbeSettings')]"
                }
              }
            }
          ],
          "frontendEndpoints": [
            {
              "name": "frontendEndpoint",
              "properties": {
                "hostName": "[concat(parameters('frontDoorName'), '.azurefd.net')]",
                "sessionAffinityEnabledState": "Disabled"
              }
            }
          ],
          "enabledState": "Enabled"
        },
        "dependsOn": [
          "apiManagementLocations"
        ]
      }
    ],
    "outputs": {
      "frontDoorFrontendHostname": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.Network/frontDoors', parameters('frontDoorName')), '2019-04-01').frontendEndpoints[0].properties.hostName]"
      }
    }
  }